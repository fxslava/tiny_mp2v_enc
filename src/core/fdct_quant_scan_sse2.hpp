// Copyright © 2021 Vladislav Ovchinnikov. All rights reserved.
#pragma once
#include <stdint.h>
#include <algorithm>
#include <emmintrin.h>
#include "common/cpu.hpp"
#include "quant_scan_c.hpp"

ALIGN(16) int16_t quant_mult_tbl[31][64] = {
    { 8192,	4096,	3449,	2979,	2521,	2427,	2260,	1928,	4096,	4096,	2979,	2731,	2427,	2260,	1928,	1771,	3449,	2979,	2521,	2427,	2260,	1928,	1928,	1725,	2979,	2979,	2521,	2427,	2260,	1928,	1771,	1638,	2979,	2521,	2427,	2260,	2048,	1872,	1638,	1365,	2521,	2427,	2260,	2048,	1872,	1638,	1365,	1130,	2521,	2427,	2260,	1928,	1725,	1425,	1170,	950,	2427,	2260,	1872,	1725,	1425,	1170,	950,	790 },
    { 4096,	2048,	1725,	1489,	1260,	1214,	1130,	964,	2048,	2048,	1489,	1365,	1214,	1130,	964,	886,	1725,	1489,	1260,	1214,	1130,	964,	964,	862,	1489,	1489,	1260,	1214,	1130,	964,	886,	819,	1489,	1260,	1214,	1130,	1024,	936,	819,	683,	1260,	1214,	1130,	1024,	936,	819,	683,	565,	1260,	1214,	1130,	964,	862,	712,	585,	475,	1214,	1130,	936,	862,	712,	585,	475,	395 },
    { 2731,	1365,	1150,	993,	840,	809,	753,	643,	1365,	1365,	993,	910,	809,	753,	643,	590,	1150,	993,	840,	809,	753,	643,	643,	575,	993,	993,	840,	809,	753,	643,	590,	546,	993,	840,	809,	753,	683,	624,	546,	455,	840,	809,	753,	683,	624,	546,	455,	377,	840,	809,	753,	643,	575,	475,	390,	317,	809,	753,	624,	575,	475,	390,	317,	263 },
    { 2048,	1024,	862,	745,	630,	607,	565,	482,	1024,	1024,	745,	683,	607,	565,	482,	443,	862,	745,	630,	607,	565,	482,	482,	431,	745,	745,	630,	607,	565,	482,	443,	410,	745,	630,	607,	565,	512,	468,	410,	341,	630,	607,	565,	512,	468,	410,	341,	282,	630,	607,	565,	482,	431,	356,	293,	237,	607,	565,	468,	431,	356,	293,	237,	197 },
    { 1638,	819,	690,	596,	504,	485,	452,	386,	819,	819,	596,	546,	485,	452,	386,	354,	690,	596,	504,	485,	452,	386,	386,	345,	596,	596,	504,	485,	452,	386,	354,	328,	596,	504,	485,	452,	410,	374,	328,	273,	504,	485,	452,	410,	374,	328,	273,	226,	504,	485,	452,	386,	345,	285,	234,	190,	485,	452,	374,	345,	285,	234,	190,	158 },
    { 1365,	683,	575,	496,	420,	405,	377,	321,	683,	683,	496,	455,	405,	377,	321,	295,	575,	496,	420,	405,	377,	321,	321,	287,	496,	496,	420,	405,	377,	321,	295,	273,	496,	420,	405,	377,	341,	312,	273,	228,	420,	405,	377,	341,	312,	273,	228,	188,	420,	405,	377,	321,	287,	237,	195,	158,	405,	377,	312,	287,	237,	195,	158,	132 },
    { 1170,	585,	493,	426,	360,	347,	323,	275,	585,	585,	426,	390,	347,	323,	275,	253,	493,	426,	360,	347,	323,	275,	275,	246,	426,	426,	360,	347,	323,	275,	253,	234,	426,	360,	347,	323,	293,	267,	234,	195,	360,	347,	323,	293,	267,	234,	195,	161,	360,	347,	323,	275,	246,	204,	167,	136,	347,	323,	267,	246,	204,	167,	136,	113 },
    { 1024,	512,	431,	372,	315,	303,	282,	241,	512,	512,	372,	341,	303,	282,	241,	221,	431,	372,	315,	303,	282,	241,	241,	216,	372,	372,	315,	303,	282,	241,	221,	205,	372,	315,	303,	282,	256,	234,	205,	171,	315,	303,	282,	256,	234,	205,	171,	141,	315,	303,	282,	241,	216,	178,	146,	119,	303,	282,	234,	216,	178,	146,	119,	99 },
    { 819,	410,	345,	298,	252,	243,	226,	193,	410,	410,	298,	273,	243,	226,	193,	177,	345,	298,	252,	243,	226,	193,	193,	172,	298,	298,	252,	243,	226,	193,	177,	164,	298,	252,	243,	226,	205,	187,	164,	137,	252,	243,	226,	205,	187,	164,	137,	113,	252,	243,	226,	193,	172,	142,	117,	95,	243,	226,	187,	172,	142,	117,	95,	79 },
    { 683,	341,	287,	248,	210,	202,	188,	161,	341,	341,	248,	228,	202,	188,	161,	148,	287,	248,	210,	202,	188,	161,	161,	144,	248,	248,	210,	202,	188,	161,	148,	137,	248,	210,	202,	188,	171,	156,	137,	114,	210,	202,	188,	171,	156,	137,	114,	94,	210,	202,	188,	161,	144,	119,	98,	79,	202,	188,	156,	144,	119,	98,	79,	66 },
    { 585,	293,	246,	213,	180,	173,	161,	138,	293,	293,	213,	195,	173,	161,	138,	127,	246,	213,	180,	173,	161,	138,	138,	123,	213,	213,	180,	173,	161,	138,	127,	117,	213,	180,	173,	161,	146,	134,	117,	98,	180,	173,	161,	146,	134,	117,	98,	81,	180,	173,	161,	138,	123,	102,	84,	68,	173,	161,	134,	123,	102,	84,	68,	56 },
    { 512,	256,	216,	186,	158,	152,	141,	120,	256,	256,	186,	171,	152,	141,	120,	111,	216,	186,	158,	152,	141,	120,	120,	108,	186,	186,	158,	152,	141,	120,	111,	102,	186,	158,	152,	141,	128,	117,	102,	85,	158,	152,	141,	128,	117,	102,	85,	71,	158,	152,	141,	120,	108,	89,	73,	59,	152,	141,	117,	108,	89,	73,	59,	49 },
    { 455,	228,	192,	165,	140,	135,	126,	107,	228,	228,	165,	152,	135,	126,	107,	98,	192,	165,	140,	135,	126,	107,	107,	96,	165,	165,	140,	135,	126,	107,	98,	91,	165,	140,	135,	126,	114,	104,	91,	76,	140,	135,	126,	114,	104,	91,	76,	63,	140,	135,	126,	107,	96,	79,	65,	53,	135,	126,	104,	96,	79,	65,	53,	44 },
    { 410,	205,	172,	149,	126,	121,	113,	96,	205,	205,	149,	137,	121,	113,	96,	89,	172,	149,	126,	121,	113,	96,	96,	86,	149,	149,	126,	121,	113,	96,	89,	82,	149,	126,	121,	113,	102,	94,	82,	68,	126,	121,	113,	102,	94,	82,	68,	56,	126,	121,	113,	96,	86,	71,	59,	47,	121,	113,	94,	86,	71,	59,	47,	39 },
    { 372,	186,	157,	135,	115,	110,	103,	88,	186,	186,	135,	124,	110,	103,	88,	81,	157,	135,	115,	110,	103,	88,	88,	78,	135,	135,	115,	110,	103,	88,	81,	74,	135,	115,	110,	103,	93,	85,	74,	62,	115,	110,	103,	93,	85,	74,	62,	51,	115,	110,	103,	88,	78,	65,	53,	43,	110,	103,	85,	78,	65,	53,	43,	36 },
    { 341,	171,	144,	124,	105,	101,	94,	80,	171,	171,	124,	114,	101,	94,	80,	74,	144,	124,	105,	101,	94,	80,	80,	72,	124,	124,	105,	101,	94,	80,	74,	68,	124,	105,	101,	94,	85,	78,	68,	57,	105,	101,	94,	85,	78,	68,	57,	47,	105,	101,	94,	80,	72,	59,	49,	40,	101,	94,	78,	72,	59,	49,	40,	33 },
    { 293,	146,	123,	106,	90,	87,	81,	69,	146,	146,	106,	98,	87,	81,	69,	63,	123,	106,	90,	87,	81,	69,	69,	62,	106,	106,	90,	87,	81,	69,	63,	59,	106,	90,	87,	81,	73,	67,	59,	49,	90,	87,	81,	73,	67,	59,	49,	40,	90,	87,	81,	69,	62,	51,	42,	34,	87,	81,	67,	62,	51,	42,	34,	28 },
    { 256,	128,	108,	93,	79,	76,	71,	60,	128,	128,	93,	85,	76,	71,	60,	55,	108,	93,	79,	76,	71,	60,	60,	54,	93,	93,	79,	76,	71,	60,	55,	51,	93,	79,	76,	71,	64,	59,	51,	43,	79,	76,	71,	64,	59,	51,	43,	35,	79,	76,	71,	60,	54,	45,	37,	30,	76,	71,	59,	54,	45,	37,	30,	25 },
    { 228,	114,	96,	83,	70,	67,	63,	54,	114,	114,	83,	76,	67,	63,	54,	49,	96,	83,	70,	67,	63,	54,	54,	48,	83,	83,	70,	67,	63,	54,	49,	46,	83,	70,	67,	63,	57,	52,	46,	38,	70,	67,	63,	57,	52,	46,	38,	31,	70,	67,	63,	54,	48,	40,	33,	26,	67,	63,	52,	48,	40,	33,	26,	22 },
    { 205,	102,	86,	74,	63,	61,	56,	48,	102,	102,	74,	68,	61,	56,	48,	44,	86,	74,	63,	61,	56,	48,	48,	43,	74,	74,	63,	61,	56,	48,	44,	41,	74,	63,	61,	56,	51,	47,	41,	34,	63,	61,	56,	51,	47,	41,	34,	28,	63,	61,	56,	48,	43,	36,	29,	24,	61,	56,	47,	43,	36,	29,	24,	20 },
    { 186,	93,	78,	68,	57,	55,	51,	44,	93,	93,	68,	62,	55,	51,	44,	40,	78,	68,	57,	55,	51,	44,	44,	39,	68,	68,	57,	55,	51,	44,	40,	37,	68,	57,	55,	51,	47,	43,	37,	31,	57,	55,	51,	47,	43,	37,	31,	26,	57,	55,	51,	44,	39,	32,	27,	22,	55,	51,	43,	39,	32,	27,	22,	18 },
    { 171,	85,	72,	62,	53,	51,	47,	40,	85,	85,	62,	57,	51,	47,	40,	37,	72,	62,	53,	51,	47,	40,	40,	36,	62,	62,	53,	51,	47,	40,	37,	34,	62,	53,	51,	47,	43,	39,	34,	28,	53,	51,	47,	43,	39,	34,	28,	24,	53,	51,	47,	40,	36,	30,	24,	20,	51,	47,	39,	36,	30,	24,	20,	16 },
    { 158,	79,	66,	57,	48,	47,	43,	37,	79,	79,	57,	53,	47,	43,	37,	34,	66,	57,	48,	47,	43,	37,	37,	33,	57,	57,	48,	47,	43,	37,	34,	32,	57,	48,	47,	43,	39,	36,	32,	26,	48,	47,	43,	39,	36,	32,	26,	22,	48,	47,	43,	37,	33,	27,	23,	18,	47,	43,	36,	33,	27,	23,	18,	15 },
    { 146,	73,	62,	53,	45,	43,	40,	34,	73,	73,	53,	49,	43,	40,	34,	32,	62,	53,	45,	43,	40,	34,	34,	31,	53,	53,	45,	43,	40,	34,	32,	29,	53,	45,	43,	40,	37,	33,	29,	24,	45,	43,	40,	37,	33,	29,	24,	20,	45,	43,	40,	34,	31,	25,	21,	17,	43,	40,	33,	31,	25,	21,	17,	14 },
    { 128,	64,	54,	47,	39,	38,	35,	30,	64,	64,	47,	43,	38,	35,	30,	28,	54,	47,	39,	38,	35,	30,	30,	27,	47,	47,	39,	38,	35,	30,	28,	26,	47,	39,	38,	35,	32,	29,	26,	21,	39,	38,	35,	32,	29,	26,	21,	18,	39,	38,	35,	30,	27,	22,	18,	15,	38,	35,	29,	27,	22,	18,	15,	12 },
    { 114,	57,	48,	41,	35,	34,	31,	27,	57,	57,	41,	38,	34,	31,	27,	25,	48,	41,	35,	34,	31,	27,	27,	24,	41,	41,	35,	34,	31,	27,	25,	23,	41,	35,	34,	31,	28,	26,	23,	19,	35,	34,	31,	28,	26,	23,	19,	16,	35,	34,	31,	27,	24,	20,	16,	13,	34,	31,	26,	24,	20,	16,	13,	11 },
    { 102,	51,	43,	37,	32,	30,	28,	24,	51,	51,	37,	34,	30,	28,	24,	22,	43,	37,	32,	30,	28,	24,	24,	22,	37,	37,	32,	30,	28,	24,	22,	20,	37,	32,	30,	28,	26,	23,	20,	17,	32,	30,	28,	26,	23,	20,	17,	14,	32,	30,	28,	24,	22,	18,	15,	12,	30,	28,	23,	22,	18,	15,	12,	10 },
    { 93,	47,	39,	34,	29,	28,	26,	22,	47,	47,	34,	31,	28,	26,	22,	20,	39,	34,	29,	28,	26,	22,	22,	20,	34,	34,	29,	28,	26,	22,	20,	19,	34,	29,	28,	26,	23,	21,	19,	16,	29,	28,	26,	23,	21,	19,	16,	13,	29,	28,	26,	22,	20,	16,	13,	11,	28,	26,	21,	20,	16,	13,	11,	9 },
    { 85,	43,	36,	31,	26,	25,	24,	20,	43,	43,	31,	28,	25,	24,	20,	18,	36,	31,	26,	25,	24,	20,	20,	18,	31,	31,	26,	25,	24,	20,	18,	17,	31,	26,	25,	24,	21,	20,	17,	14,	26,	25,	24,	21,	20,	17,	14,	12,	26,	25,	24,	20,	18,	15,	12,	10,	25,	24,	20,	18,	15,	12,	10,	8 },
    { 79,	39,	33,	29,	24,	23,	22,	19,	39,	39,	29,	26,	23,	22,	19,	17,	33,	29,	24,	23,	22,	19,	19,	17,	29,	29,	24,	23,	22,	19,	17,	16,	29,	24,	23,	22,	20,	18,	16,	13,	24,	23,	22,	20,	18,	16,	13,	11,	24,	23,	22,	19,	17,	14,	11,	9,	23,	22,	18,	17,	14,	11,	9,	8 },
    { 73,	37,	31,	27,	23,	22,	20,	17,	37,	37,	27,	24,	22,	20,	17,	16,	31,	27,	23,	22,	20,	17,	17,	15,	27,	27,	23,	22,	20,	17,	16,	15,	27,	23,	22,	20,	18,	17,	15,	12,	23,	22,	20,	18,	17,	15,	12,	10,	23,	22,	20,	17,	15,	13,	10,	8,	22,	20,	17,	15,	13,	10,	8,	7 },
};

MP2V_INLINE __m128i _mm_tmp_op1_epi16(__m128i src) {
    const __m128i tmp = _mm_mulhi_epi16(src, _mm_set1_epi16(9598));
    return _mm_subs_epi16(src, _mm_adds_epi16(tmp, tmp));
}

MP2V_INLINE __m128i _mm_tmp_op2_epi16(__m128i src) {
    const __m128i tmp = _mm_mulhi_epi16(src, _mm_set1_epi16(15034));
    return _mm_subs_epi16(src, _mm_adds_epi16(tmp, tmp));
}

MP2V_INLINE __m128i _mm_tmp_op4_epi16(__m128i src) {
    const __m128i tmp = _mm_mulhi_epi16(src, _mm_set1_epi16(10045));
    return _mm_adds_epi16(src, _mm_adds_epi16(tmp, tmp));
}

MP2V_INLINE __m128i _mm_tmp_op5_epi16(__m128i src) {
    const __m128i tmp = _mm_mulhi_epi16(src, _mm_set1_epi16(12540));
    return _mm_adds_epi16(tmp, tmp);
}

template<bool sat>
MP2V_INLINE __m128i _mm_x2_epi16(__m128i tmp) {
    const __m128i res = _mm_adds_epi16(tmp, tmp);
    return sat ? _mm_max_epi16(_mm_min_epi16(res, _mm_set1_epi16(2047)), _mm_set1_epi16(-2048)) : res;
}

template<bool sat = false>
MP2V_INLINE void fdct_1d_sse2(__m128i (&src)[8]) {
    const __m128i v0 = _mm_adds_epi16(src[0], src[7]);
    const __m128i v1 = _mm_adds_epi16(src[1], src[6]);
    const __m128i v2 = _mm_adds_epi16(src[2], src[5]);
    const __m128i v3 = _mm_adds_epi16(src[3], src[4]);
    const __m128i v4 = _mm_subs_epi16(src[3], src[4]);
    const __m128i v5 = _mm_subs_epi16(src[2], src[5]);
    const __m128i v6 = _mm_subs_epi16(src[1], src[6]);
    const __m128i v7 = _mm_subs_epi16(src[0], src[7]);

    const __m128i v8 = _mm_adds_epi16(v0, v3);
    const __m128i v9 = _mm_adds_epi16(v1, v2);
    const __m128i v10 = _mm_subs_epi16(v1, v2);
    const __m128i v11 = _mm_subs_epi16(v0, v3);
    const __m128i v12 = _mm_adds_epi16(v4, v5);
    const __m128i v13 = _mm_tmp_op1_epi16(_mm_adds_epi16(v5, v6));
    const __m128i v14 = _mm_adds_epi16(v6, v7);
    const __m128i v15 = _mm_adds_epi16(v8, v9);
    const __m128i v16 = _mm_subs_epi16(v8, v9);
    const __m128i v17 = _mm_tmp_op1_epi16(_mm_adds_epi16(v10, v11));
    const __m128i v18 = _mm_tmp_op5_epi16(_mm_subs_epi16(v14, v12));
    const __m128i v19 = _mm_subs_epi16(_mm_tmp_op2_epi16(v12), v18);
    const __m128i v20 = _mm_subs_epi16(_mm_tmp_op4_epi16(v14), v18);
    const __m128i v21 = _mm_adds_epi16(v17, v11);
    const __m128i v22 = _mm_subs_epi16(v11, v17);
    const __m128i v23 = _mm_adds_epi16(v13, v7);
    const __m128i v24 = _mm_subs_epi16(v7, v13);
    const __m128i v25 = _mm_adds_epi16(v19, v24);
    const __m128i v26 = _mm_adds_epi16(v23, v20);
    const __m128i v27 = _mm_subs_epi16(v23, v20);
    const __m128i v28 = _mm_subs_epi16(v24, v19);

    src[0] = _mm_x2_epi16<sat>(_mm_mulhi_epi16(v15, _mm_set1_epi16(11585)));
    src[1] = _mm_x2_epi16<sat>(_mm_mulhi_epi16(v26, _mm_set1_epi16(8352)));
    src[2] = _mm_x2_epi16<sat>(_mm_mulhi_epi16(v21, _mm_set1_epi16(8867)));
    src[3] = _mm_x2_epi16<sat>(_mm_mulhi_epi16(v28, _mm_set1_epi16(9852)));
    src[4] = _mm_x2_epi16<sat>(_mm_mulhi_epi16(v16, _mm_set1_epi16(11585)));
    src[5] = _mm_x2_epi16<sat>(_mm_mulhi_epi16(v25, _mm_set1_epi16(14745)));
    src[6] = _mm_x2_epi16<sat>(_mm_subs_epi16(v22, _mm_mulhi_epi16(v22, _mm_set1_epi16(11361))));
    src[7] = _mm_x2_epi16<sat>(_mm_adds_epi16(v27, _mm_mulhi_epi16(v27, _mm_set1_epi16(9223))));
}

MP2V_INLINE void transpose_8x8_sse2(__m128i (&src)[8]) {
    __m128i a03b03 = _mm_unpacklo_epi16(src[0], src[1]);
    __m128i c03d03 = _mm_unpacklo_epi16(src[2], src[3]);
    __m128i e03f03 = _mm_unpacklo_epi16(src[4], src[5]);
    __m128i g03h03 = _mm_unpacklo_epi16(src[6], src[7]);
    __m128i a47b47 = _mm_unpackhi_epi16(src[0], src[1]);
    __m128i c47d47 = _mm_unpackhi_epi16(src[2], src[3]);
    __m128i e47f47 = _mm_unpackhi_epi16(src[4], src[5]);
    __m128i g47h47 = _mm_unpackhi_epi16(src[6], src[7]);

    __m128i a01b01c01d01 = _mm_unpacklo_epi32(a03b03, c03d03);
    __m128i a23b23c23d23 = _mm_unpackhi_epi32(a03b03, c03d03);
    __m128i e01f01g01h01 = _mm_unpacklo_epi32(e03f03, g03h03);
    __m128i e23f23g23h23 = _mm_unpackhi_epi32(e03f03, g03h03);
    __m128i a45b45c45d45 = _mm_unpacklo_epi32(a47b47, c47d47);
    __m128i a67b67c67d67 = _mm_unpackhi_epi32(a47b47, c47d47);
    __m128i e45f45g45h45 = _mm_unpacklo_epi32(e47f47, g47h47);
    __m128i e67f67g67h67 = _mm_unpackhi_epi32(e47f47, g47h47);

    src[0] = _mm_unpacklo_epi64(a01b01c01d01, e01f01g01h01);
    src[1] = _mm_unpackhi_epi64(a01b01c01d01, e01f01g01h01);
    src[2] = _mm_unpacklo_epi64(a23b23c23d23, e23f23g23h23);
    src[3] = _mm_unpackhi_epi64(a23b23c23d23, e23f23g23h23);
    src[4] = _mm_unpacklo_epi64(a45b45c45d45, e45f45g45h45);
    src[5] = _mm_unpackhi_epi64(a45b45c45d45, e45f45g45h45);
    src[6] = _mm_unpacklo_epi64(a67b67c67d67, e67f67g67h67);
    src[7] = _mm_unpackhi_epi64(a67b67c67d67, e67f67g67h67);
}

MP2V_INLINE void quantize_8x8_sse2(__m128i (&buffer)[8], int quantizer_scale, int dc_prec) {
    int16_t DC = (int16_t)buffer[0].m128i_i16[0];
    int32_t QDC = (DC + 3 - dc_prec) >> (3 - dc_prec); // <-- precise rounding, less pulsating effect

    for (int i = 0; i < 8; i++) {
        __m128i val  = buffer[i];
        __m128i sign = _mm_srai_epi16(val, 15);
        __m128i absv = _mm_xor_si128(_mm_add_epi16(val, sign), sign);
        __m128i WS   = _mm_load_si128((__m128i*) &quant_mult_tbl[quantizer_scale][i * 8]);
        __m128i qabs = _mm_mulhi_epi16(_mm_slli_epi16(absv, 5), WS);
        buffer[i] = _mm_sub_epi16(_mm_xor_si128(qabs, sign), sign);
    }

    buffer[0].m128i_i16[0] = QDC; //tmp0 >> (3 - dc_prec);
}

MP2V_INLINE uint64_t make_altscan_sse2(int16_t(&F)[65], __m128i (&v)[8]) {
    __m128i tmp0 = _mm_unpacklo_epi32(v[1], v[2]);                                                 // 10 11 20 21 12 13 22 23
    __m128i res0 = _mm_unpacklo_epi64(v[0], tmp0);                                                 // 01 02 03 04 10 11 20 21
    _mm_store_si128((__m128i*) & F[0], res0);

            tmp0 = _mm_shufflehi_epi16(v[1], _MM_SHUFFLE(2, 3, 0, 1));                             // 10 11 12 13 15 14 17 16
    __m128i tmp1 = _mm_blend_epi16(_mm_srli_si128(v[1], 4), tmp0, 0b11000000);                     // 12 13 14 15 16 17 17 16
    __m128i res1 = _mm_blend_epi16(_mm_srli_si128(v[0], 4), tmp1, 0b11000011);                     // 12 13 04 05 06 07 17 16
    _mm_store_si128((__m128i*) & F[8], res1);

    uint64_t nnz = _mm_movemask_epi8(_mm_cmpeq_epi8(_mm_packs_epi16(res0, res1), _mm_setzero_si128()));

            tmp0 = _mm_srli_si128(tmp0, 8);                                                        // 15 14 17 16 00 00 00 00
            tmp1 = _mm_shufflelo_epi16(v[2], _MM_SHUFFLE(2, 3, 1, 0));                             // 20 21 23 22 24 25 26 27
    __m128i tmp2 = _mm_unpacklo_epi32(v[3], v[4]);                                                 // 30 31 40 41 32 33 42 43
    __m128i res2 = _mm_or_si128(_mm_blend_epi16(tmp0, tmp1, 0b00001100), _mm_slli_si128(tmp2, 8)); // 15 14 23 22 30 31 40 41
    _mm_store_si128((__m128i*) & F[16], res2);

            tmp0 = _mm_shuffle_epi32(v[3], _MM_SHUFFLE(2, 0, 3, 1));                               // 32 33 36 37 30 31 34 35
            tmp1 = _mm_srli_si128(tmp1, 4);                                                        // 23 22 24 25 26 27 00 00
    __m128i res3 = _mm_blend_epi16(tmp0, tmp1, 0b00111100);                                        // 32 33 24 25 26 27 34 35
    _mm_store_si128((__m128i*) & F[24], res3);

    nnz |= (uint64_t)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_packs_epi16(res2, res3), _mm_setzero_si128())) << 16;

            tmp0 = _mm_blend_epi16(_mm_srli_si128(tmp0, 4), v[4], 0b11111100);                     // 36 37 42 43 44 45 46 47
            tmp1 = _mm_unpacklo_epi32(v[5], v[6]);                                                 // 50 51 60 61 52 53 62 63
    __m128i res4 = _mm_unpacklo_epi64(tmp0, tmp1);                                                 // 36 37 42 43 50 51 60 61
    _mm_store_si128((__m128i*) & F[32], res4);

            tmp0 = _mm_shuffle_epi32(v[5], _MM_SHUFFLE(2, 0, 3, 1));                               // 52 53 56 57 50 51 54 55
            tmp1 = _mm_srli_si128(v[4], 4);                                                        // 42 43 44 45 46 47 00 00
    __m128i res5 = _mm_blend_epi16(tmp0, tmp1, 0b00111100);                                        // 52 53 44 45 46 47 54 55
    _mm_store_si128((__m128i*) & F[40], res5);

    nnz |= (uint64_t)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_packs_epi16(res4, res5), _mm_setzero_si128())) << 32;

            tmp0 = _mm_srli_si128(_mm_unpacklo_epi32(tmp0, v[6]), 8);                              // 56 57 62 63 00 00 00 00
    __m128i res6 = _mm_or_si128(tmp0, _mm_slli_si128(v[7], 8));                                    // 56 57 62 63 70 71 72 73
    _mm_store_si128((__m128i*) & F[48], res6);
    __m128i res7 = _mm_unpackhi_epi64(v[6], v[7]);                                                 // 64 65 66 67 74 75 76 77
    _mm_store_si128((__m128i*) & F[56], res7);

    nnz |= (uint64_t)_mm_movemask_epi8(_mm_cmpeq_epi8(_mm_packs_epi16(res6, res7), _mm_setzero_si128())) << 48;
    F[64] = 0;
    return nnz;
}

template<bool alt_scan, bool intra = true>
uint64_t forward_dct_scan_quant_template(int16_t(&F)[65], uint8_t* src, int stride, int quantizer_scale, int dc_prec) {
    ALIGN(16) int16_t tmp[64];
    __m128i buffer[8];
    for (int i = 0; i < 8; i++)
        buffer[i] = _mm_cvtepu8_epi16(_mm_loadl_epi64((__m128i*) & src[i * stride]));

    fdct_1d_sse2(buffer);
    transpose_8x8_sse2(buffer);
    fdct_1d_sse2<true>(buffer);
    //transpose_8x8_sse2(buffer);
    quantize_8x8_sse2(buffer, quantizer_scale, dc_prec);

    //transpose_8x8_sse2(buffer);
    return make_altscan_sse2(F, buffer);
}